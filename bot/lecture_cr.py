import osfrom telebot.types import InlineKeyboardButton,InlineKeyboardMarkupfrom shared import dbMigfrom utils import randfrom utils import setLanguageBASE_DIR = os.path.dirname(os.path.dirname(__file__))MEDIA_ROOT = os.path.join(BASE_DIR, "webApp", "media")randnums=[]def manageLectures(bot,groupID):    _ = setLanguage(str(groupID))    markup=InlineKeyboardMarkup()    add=InlineKeyboardButton(_('Add Lecture'),callback_data=f'addLecture_{groupID}')    getAll=InlineKeyboardButton(_('Get All Lectures'),callback_data=f'getAllLectures_{groupID}')    markup.add(add,getAll)    bot.send_message(groupID,_('🤖Select a one of buttons to do that'),reply_markup=markup)def addLecture(bot,groupID):    _ = setLanguage(str(groupID))    _num=rand(randnums)    status= dbMig.addRequest(_num, groupID,"add_lecture")    if status!=True:        bot.send_message(groupID,_('🚫Error while adding request'))    bot.send_message(groupID,_('🔹Yeah! Now you can add the lecture from this url:')+'\n'+f'http://127.0.0.1:8000/add-lecture/{_num}')def getAllLectures(bot,groupID):    _ = setLanguage(str(groupID))    list=dbMig.getAllLecture(groupID)    if list==None:        bot.send_message(groupID,_("🚫Your request for getting all lectures, failed"))    wholeMessage=""    markup=InlineKeyboardMarkup()    for item in list:        message=_("Lecture Name: ")+f"{item[1]}"+_("\n Phone: ")+f"{item[2]}"+_("\n Rate: ")+f"{item[3]}"+"\n-----------------\n"        wholeMessage=wholeMessage+message        btn=InlineKeyboardButton(f'{item[1]}',callback_data=f"lecture_{item[0]}_{groupID}")        markup.add(btn)    back=InlineKeyboardButton(_('Back'),callback_data=f'manageLectures_{groupID}')    markup.add(back)    bot.send_message(groupID,wholeMessage+_(f"\n🔹The number of lectures: ")+f"{len(list)}",reply_markup=markup)def getLecture(bot,lecID,groupID):    _ = setLanguage(str(groupID))    lec=dbMig.getLecture(lecID,groupID)    if lec==None:        bot.send_message(groupID,_("🚫Your request for getting lecture, failed"))    message=_("Lecture name: ")+f"{lec[1]}"+_("\nPhone: ")+f"{lec[2]}"+_("\nRate: ")+f"{lec[3]}"    markup=InlineKeyboardMarkup()    edit=InlineKeyboardButton(_('Edit'),callback_data=f"editLecture_{lec[0]}_{groupID}")    delete=InlineKeyboardButton(_('Delete'),callback_data=f"deleteLecture_{lec[0]}_{groupID}")    like=InlineKeyboardButton('👍',callback_data=f"like_{lec[0]}_{groupID}")    dislike=InlineKeyboardButton('👎',callback_data=f'dislike_{lec[0]}_{groupID}')    back=InlineKeyboardButton(_('Back'),callback_data=f'getAllLectures_{groupID}')    markup.add(edit,delete)    markup.add(like,dislike)    markup.add(back)    if lec[4]!='':        picPath = MEDIA_ROOT+"\\"+lec[4]        with open(picPath, "rb") as photo:            bot.send_photo(groupID, photo, caption=message, reply_markup=markup)    else:        bot.send_message(groupID,message,reply_markup=markup)def editLecture(bot,lecID,groupID):    _ = setLanguage(str(groupID))    status = dbMig.addRequest(lecID, groupID, "edit_lecture")    if status!=True:        bot.send_message(groupID,_('🚫Error while adding request'))    bot.send_message(groupID,_('🔹Yeah! Now you can edit the lecture from this url:')+'\n'+f'http://127.0.0.1:8000/edit-lecture/{lecID}')def increaseRate(bot,call,lecID,groupID):    _ = setLanguage(str(groupID))    status=dbMig.increaseRate(lecID,groupID)    if status:        bot.answer_callback_query(callback_query_id=call.id, text=_("Your vote registed!"), show_alert=True)def decreaseRate(bot,call,lecID,groupID):    _ = setLanguage(str(groupID))    status=dbMig.decreaseRate(lecID,groupID)    if status:        bot.answer_callback_query(callback_query_id=call.id, text=_("Your vote registed!"), show_alert=True)def deleteLecture(bot,lecID,groupID):    _ = setLanguage(str(groupID))    oldPic = dbMig.getPicLecture(lecID, groupID)    status=dbMig.deleteLecture(lecID,groupID)    if oldPic[0] != '' and status:        oldPicPath = MEDIA_ROOT+"\\"+oldPic[0]        if os.path.exists(oldPicPath):            os.remove(oldPicPath)    if status:        status=dbMig.delRequest(lecID)        if status:            bot.send_message(groupID, _("✅The lecture successfully deleted"))    else:        s = dbMig.delRequest(lecID)        bot.send_message(groupID,_("🚫You can't delete the lecture because this has already been selected for a classe"))